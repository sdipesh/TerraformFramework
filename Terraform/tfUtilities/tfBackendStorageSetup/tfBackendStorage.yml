trigger:
- none

pool:
  name: 'Azure Pipelines'
  vmImage: 'vs2017-win2016'

variables:
  #Azure DevOps - Service connection for terraform azure subscription
  tfBackendServiceConnection: 'Bank-TerraformDevOps'
  #terraform prefix (region-project)
  tfRegion: 'cac'
  tfProject: 'tf'
  tfEnvironment: 'dev'
  tfContainerNameDev: 'dev'
  tfContainerNameQAT: 'qat'
  tfContainerNameUAT: 'uat'
  tfLocation: 'canadacentral'

stages:
  - stage: TFBackendStorage
    displayName: 'Setup Terraform Backend Storage'
    jobs:
    - job: TFBackendStorage

      steps:
      - checkout: none
      - task: AzureCLI@2
        displayName: Azure CLI
        inputs:
          azureSubscription: '$(tfBackendServiceConnection)'
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |        
            $accountInfo = az account show
            $accountInfoObject = $accountInfo | ConvertFrom-Json
            $subscriptionId  = $accountInfoObject.id
            $resourceGroupName = "$(tfRegion)-rg-$(tfProject)-$(tfEnvironment)"
            $storageAccountName = "$(tfRegion)sa$(tfProject)$(tfEnvironment)"
            $keyVaultName = "$(tfRegion)-kv-$(tfProject)-$(tfEnvironment)"
            $storage_account_key = ""
            $scope = "/subscriptions/"+$subscriptionId+"/resourceGroups/"+$resourceGroupName+"/providers/Microsoft.Storage/storageAccounts/"+$storageAccountName

            #Resource group
            $rsgExists = az group exists -n $resourceGroupName
            if ($rsgExists -eq 'true') {                
                echo "Resource Group Exists!!"
            }
            else {
                echo "Creating Resource Group:" + $resourceGroupName
                az group create --name $resourceGroupName --location "$(tfLocation)" --tags Application=terraform
                echo "Resource Group Created!!"
            }

            #Storage Account
            $storageAccountCheck = az storage account list --resource-group $resourceGroupName --query "[?name=='$storageAccountName']" | ConvertFrom-Json
            $storageAccountExists = $storageAccountCheck.Length -gt 0
            if ($storageAccountExists) {
                echo "Storage Account Exists!!"

                echo "Retrieving Storage account key"
                $storage_account_key=$(az storage account keys list --resource-group $resourceGroupName --account-name $storageAccountName --query [0].value -o tsv)
                echo "Storage account key retrieved"
            }
            else {
                echo "Creating Storage Account: " + $storageAccountName
                az storage account create --name $storageAccountName --resource-group $resourceGroupName --location "$(tfLocation)" --sku Standard_LRS --encryption-services blob --tags Application=terraform
                echo "Storage Account Created!!"

                echo "Retrieving Storage account key"
                $storage_account_key=$(az storage account keys list --resource-group $resourceGroupName --account-name $storageAccountName --query [0].value -o tsv)
                echo "Storage account key retrieved"

                #Key Vault
                $keyVaultCheck = az keyvault show --name $keyVaultName --subscription $subscriptionId --resource-group $resourceGroupName
                if ($keyVaultCheck -ne $null) {
                    echo "Key Vault Exists!!"
                }
                else {
                    echo "Creating Key Vault: " + $keyVaultName
                    az keyvault create --name $keyVaultName --resource-group $resourceGroupName --location "$(tfLocation)" --tags Application=terraform
                    echo "Key Vault Created!!"
                }

                #Secret                
                echo "Adding Storage account key as secret in key vault"
                az keyvault secret set --vault-name $keyVaultName --name "$storageAccountName-accesskey" --value $storage_account_key
                echo "Added Storage account key secret"
            }

            #Storage Container - Dev
            $blobContainerExists = az storage container show --account-name $storageAccountName --name $(tfContainerNameDev) --account-key $storage_account_key
            if ($blobContainerExists -ne $null) {
                echo "Storage Container Exists - $(tfContainerNameDev)"
            }
            else {
                echo "Creating Storage Container: $(tfContainerNameDev)"
                az storage container create --account-name $storageAccountName --name "$(tfContainerNameDev)" --account-key $storage_account_key
                echo "Storage Container Created- $(tfContainerNameDev)"
            }         

            #Storage Container - QA
            $blobContainerExists = az storage container show --account-name $storageAccountName --name $(tfContainerNameQAT) --account-key $storage_account_key
            if ($blobContainerExists -ne $null) {
                echo "Storage Container Exists - $(tfContainerNameQAT)"
            }
            else {
                echo "Creating Storage Container: $(tfContainerNameQAT)"
                az storage container create --account-name $storageAccountName --name "$(tfContainerNameQAT)" --account-key $storage_account_key
                echo "Storage Container Created - $(tfContainerNameQAT)"
            }

            #Storage Container - UAT
            $blobContainerExists = az storage container show --account-name $storageAccountName --name $(tfContainerNameUAT) --account-key $storage_account_key
            if ($blobContainerExists -ne $null) {
                echo "Storage Container Exists - $(tfContainerNameUAT)"
            }
            else {
                echo "Creating Storage Container: $(tfContainerNameUAT)"
                az storage container create --account-name $storageAccountName --name "$(tfContainerNameUAT)" --account-key $storage_account_key
                echo "Storage Container Created - $(tfContainerNameUAT)"
            }